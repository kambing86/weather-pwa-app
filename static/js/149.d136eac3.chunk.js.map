{"version":3,"file":"static/js/149.d136eac3.chunk.js","mappings":"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","sources":["features/nutrition/components/EntryList.tsx","features/nutrition/constants.ts","features/nutrition/components/CustomTableCell.tsx","features/nutrition/components/Question.tsx","features/nutrition/components/Gender.tsx","features/nutrition/components/ResultInputArea.tsx","features/nutrition/components/ResultTableHead.tsx","features/nutrition/components/Total.tsx","features/nutrition/components/ResultContent.tsx","features/nutrition/components/Result.tsx","pages/Nutrition.tsx"],"sourcesContent":["import Button from \"@mui/material/Button\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Icon from \"@mui/material/Icon\";\nimport IconButton from \"@mui/material/IconButton\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport type { Theme } from \"@mui/material/styles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport moment from \"moment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport type { AppDispatch, RootState } from \"store\";\nimport nutritionSlice from \"store/slices/nutrition.slice\";\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  list: {\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst EntryList = () => {\n  const classes = useStyles();\n  const history = useSelector((state: RootState) => state.nutrition.history);\n  const dispatch = useDispatch<AppDispatch>();\n  const navigate = useNavigate();\n  return (\n    <Container maxWidth=\"lg\" className={classes.container}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Button\n            variant=\"contained\"\n            sx={{ marginBottom: \"1rem\" }}\n            href=\"#/nutrition/result\"\n          >\n            创建新评估\n          </Button>\n          {history.length > 0 && (\n            <List component=\"nav\" className={classes.list}>\n              {history.map((h, index) => (\n                <ListItem\n                  // biome-ignore lint/suspicious/noArrayIndexKey: <explanation>\n                  key={index}\n                  secondaryAction={\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      onClick={() => {\n                        if (window.confirm(`你确定删除${h.name}的记录吗？`)) {\n                          dispatch(nutritionSlice.actions.removeHistory(index));\n                        }\n                      }}\n                    >\n                      <Icon>delete</Icon>\n                    </IconButton>\n                  }\n                >\n                  <ListItemButton\n                    onClick={() => {\n                      dispatch(nutritionSlice.actions.loadHistory(index));\n                      navigate(`/nutrition/result/${index}`);\n                    }}\n                  >\n                    <ListItemText\n                      primary={h.name}\n                      secondary={moment(h.date).format(\"YYYY-MM-DD HH:mm:ss\")}\n                    />\n                  </ListItemButton>\n                </ListItem>\n              ))}\n            </List>\n          )}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default EntryList;\n","import type { ValuesType } from \"utility-types\";\n\nexport const supplements = [\n  \"Protein\",\n  \"VitaminA\",\n  \"VitaminB\",\n  \"VitaminC\",\n  \"LecithinE\",\n  \"Fibre\",\n  \"CalMagD\",\n  \"Probiotics\",\n  \"Garlic\",\n  \"Omega3\",\n  \"DoubleX\",\n] as const;\n\nexport type SupplementType = ValuesType<typeof supplements>;\n","import { useTheme } from \"@mui/material\";\nimport TableCell, { type TableCellProps } from \"@mui/material/TableCell\";\n\nconst CustomTableCell = (props: TableCellProps) => {\n  const theme = useTheme();\n  return (\n    <TableCell\n      sx={{ border: `1px solid ${theme.palette.text.disabled}` }}\n      {...props}\n    />\n  );\n};\n\nexport default CustomTableCell;\n","import { useTheme } from \"@mui/material\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport type { AppDispatch, RootState } from \"store\";\nimport nutritionSlice from \"store/slices/nutrition.slice\";\nimport { supplements } from \"../constants\";\nimport questions from \"../questions\";\nimport CustomTableCell from \"./CustomTableCell\";\n\ninterface Props {\n  index: number;\n}\n\nconst Question = ({ index }: Props) => {\n  const theme = useTheme();\n  const answer = useSelector((state: RootState) =>\n    state.nutrition.current?.answers.at(index),\n  );\n  const dispatch = useDispatch<AppDispatch>();\n\n  const q = questions.at(index);\n  if (q == null) return null;\n  return (\n    <>\n      <CustomTableCell>\n        <Checkbox\n          checked={answer === 1}\n          onChange={(e) => {\n            dispatch(\n              nutritionSlice.actions.setAnswer({\n                index,\n                value: e.target.checked,\n              }),\n            );\n          }}\n        />\n      </CustomTableCell>\n      <CustomTableCell>\n        {index + 1} {q.text}\n      </CustomTableCell>\n      {supplements.map((s) => {\n        const counted = q.supplements.includes(s);\n        const isChecked = answer ?? false;\n        return (\n          <CustomTableCell\n            key={s}\n            align=\"center\"\n            style={{\n              background: counted\n                ? undefined\n                : theme.palette.action.disabledBackground,\n            }}\n          >\n            {counted && isChecked ? \"1\" : \"\"}\n          </CustomTableCell>\n        );\n      })}\n    </>\n  );\n};\n\nexport default memo(Question);\n","import FormControl from \"@mui/material/FormControl\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport { memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport type { AppDispatch, RootState } from \"store\";\nimport nutritionSlice from \"store/slices/nutrition.slice\";\n\nconst Gender = () => {\n  const gender = useSelector(\n    (state: RootState) => state.nutrition.current?.gender ?? \"\",\n  );\n  const dispatch = useDispatch<AppDispatch>();\n  return (\n    <FormControl>\n      <FormLabel id=\"gender\">性别</FormLabel>\n      <RadioGroup\n        aria-labelledby=\"gender\"\n        name=\"radio-buttons-group\"\n        row\n        value={gender}\n      >\n        <FormControlLabel\n          value=\"male\"\n          control={\n            <Radio\n              onChange={(e) => {\n                dispatch(nutritionSlice.actions.changeGender(e.target.value));\n              }}\n            />\n          }\n          label=\"男\"\n        />\n        <FormControlLabel\n          value=\"female\"\n          control={\n            <Radio\n              onChange={(e) => {\n                dispatch(nutritionSlice.actions.changeGender(e.target.value));\n              }}\n            />\n          }\n          label=\"女\"\n        />\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\nexport default memo(Gender);\n","import Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport type { Theme } from \"@mui/material/styles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { memo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport type { AppDispatch, RootState } from \"store\";\nimport nutritionSlice from \"store/slices/nutrition.slice\";\nimport Gender from \"./Gender\";\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n  inputArea: {\n    display: \"flex\",\n    alignItems: \"center\",\n    gap: theme.spacing(2),\n  },\n}));\n\nconst ResultInputArea = () => {\n  const classes = useStyles();\n  const name = useSelector(\n    (state: RootState) => state.nutrition.current?.name ?? \"\",\n  );\n  const age = useSelector(\n    (state: RootState) => state.nutrition.current?.age ?? \"\",\n  );\n  const dispatch = useDispatch<AppDispatch>();\n\n  const [error, setError] = useState(false);\n\n  const navigate = useNavigate();\n  const params = useParams();\n\n  return (\n    <div className={classes.inputArea}>\n      <TextField\n        label=\"名字\"\n        variant=\"outlined\"\n        value={name}\n        required\n        error={error}\n        onChange={(e) => {\n          if (error) setError(false);\n          dispatch(nutritionSlice.actions.changeName(e.target.value));\n        }}\n        helperText={error ? \"请输入名字\" : undefined}\n      />\n      <TextField\n        label=\"年龄\"\n        variant=\"outlined\"\n        value={age}\n        type=\"number\"\n        InputProps={{ inputProps: { min: 0 } }}\n        onChange={(e) => {\n          dispatch(nutritionSlice.actions.changeAge(e.target.value));\n        }}\n      />\n      <Gender />\n      <Button\n        variant=\"contained\"\n        onClick={() => {\n          if (name === \"\") {\n            setError(true);\n            return;\n          }\n          navigate(\"/nutrition\");\n          const indexParam = Number.parseInt(params[\"*\"] ?? \"\");\n          dispatch(nutritionSlice.actions.saveToHistory(indexParam));\n        }}\n      >\n        保存\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ResultInputArea);\n","import TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { memo } from \"react\";\nimport { supplements } from \"../constants\";\nimport CustomTableCell from \"./CustomTableCell\";\n\nconst ResultTableHead = () => {\n  return (\n    <TableHead>\n      <TableRow>\n        <CustomTableCell align=\"center\">打勾</CustomTableCell>\n        <CustomTableCell style={{ minWidth: \"20rem\" }} />\n        {supplements.map((s) => (\n          <CustomTableCell key={s} style={{ minWidth: \"6rem\" }} align=\"center\">\n            {s}\n          </CustomTableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default memo(ResultTableHead);\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport type { RootState } from \"store\";\nimport { supplements } from \"../constants\";\nimport questions from \"../questions\";\nimport CustomTableCell from \"./CustomTableCell\";\n\nconst Total = () => {\n  const answers = useSelector(\n    (state: RootState) => state.nutrition.current?.answers,\n  );\n\n  if (answers == null) return null;\n\n  return (\n    <>\n      <CustomTableCell>总分</CustomTableCell>\n      <CustomTableCell>如果合计超过7，建议补充</CustomTableCell>\n      {supplements.map((s) => {\n        const total = questions.reduce<number>((prev, q, index) => {\n          const counted = q.supplements.includes(s);\n          const isChecked = answers.at(index) ?? false;\n          return counted && isChecked ? prev + 1 : prev;\n        }, 0);\n        return (\n          <CustomTableCell key={s} align=\"center\">\n            {total}\n          </CustomTableCell>\n        );\n      })}\n    </>\n  );\n};\n\nexport default memo(Total);\n","import { useTheme } from \"@mui/material\";\nimport Container from \"@mui/material/Container\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableRow from \"@mui/material/TableRow\";\nimport type { Theme } from \"@mui/material/styles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { Fragment, memo } from \"react\";\nimport { supplements } from \"../constants\";\nimport questions from \"../questions\";\nimport CustomTableCell from \"./CustomTableCell\";\nimport Question from \"./Question\";\nimport ResultInputArea from \"./ResultInputArea\";\nimport ResultTableHead from \"./ResultTableHead\";\nimport Total from \"./Total\";\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n    flex: 1,\n  },\n  gridContainer: {\n    height: \"100%\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\",\n  },\n  tableContainer: {\n    flex: \"1 1 0\",\n    minHeight: 200,\n  },\n  table: {\n    userSelect: \"none\",\n  },\n}));\n\nconst ResultContent = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  return (\n    <Container maxWidth=\"xl\" className={classes.container}>\n      <Grid container spacing={3} className={classes.gridContainer}>\n        <Grid item xs={12}>\n          <Paper elevation={2} className={classes.paper}>\n            <ResultInputArea />\n            <TableContainer\n              component={Paper}\n              className={classes.tableContainer}\n            >\n              <Table className={classes.table}>\n                <ResultTableHead />\n                <TableBody>\n                  <TableRow>\n                    <CustomTableCell\n                      colSpan={2 + supplements.length}\n                      style={{\n                        background: theme.palette.text.secondary,\n                        color: theme.palette.primary.contrastText,\n                      }}\n                    >\n                      身体状况评表\n                    </CustomTableCell>\n                  </TableRow>\n                  {questions.map((_, index) => (\n                    // biome-ignore lint/suspicious/noArrayIndexKey: is ok to use index here\n                    <Fragment key={index}>\n                      <TableRow>\n                        <Question index={index} />\n                      </TableRow>\n                      {index === 36 && (\n                        <TableRow>\n                          <CustomTableCell\n                            colSpan={2 + supplements.length}\n                            style={{\n                              background: theme.palette.text.secondary,\n                              color: theme.palette.primary.contrastText,\n                            }}\n                          >\n                            生活习惯\n                          </CustomTableCell>\n                        </TableRow>\n                      )}\n                    </Fragment>\n                  ))}\n                  <TableRow>\n                    <Total />\n                  </TableRow>\n                  <TableRow>\n                    <CustomTableCell />\n                    <CustomTableCell />\n                    {supplements.map((s) => (\n                      <CustomTableCell key={s} align=\"center\">\n                        {s}\n                      </CustomTableCell>\n                    ))}\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default memo(ResultContent);\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport type { AppDispatch, RootState } from \"store\";\nimport nutritionSlice from \"store/slices/nutrition.slice\";\nimport ResultContent from \"./ResultContent\";\n\nconst Result = () => {\n  const ready = useSelector((state: RootState) => state.nutrition.ready);\n  const current = useSelector((state: RootState) => state.nutrition.current);\n  const dispatch = useDispatch<AppDispatch>();\n  const params = useParams();\n  const indexParam = Number.parseInt(params[\"*\"] ?? \"\");\n\n  useEffect(() => {\n    if (ready && current == null) {\n      dispatch(nutritionSlice.actions.loadHistory(indexParam));\n    }\n  }, [ready, current, indexParam, dispatch]);\n\n  if (current == null) return null;\n\n  return <ResultContent />;\n};\n\nexport default Result;\n","import EntryList from \"features/nutrition/components/EntryList\";\nimport Result from \"features/nutrition/components/Result\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Route, Routes } from \"react-router-dom\";\nimport type { AppDispatch } from \"store\";\nimport themeSlice from \"store/slices/theme.slice\";\n\nconst Nutrition = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  useEffect(() => {\n    dispatch(themeSlice.actions.setTitle(\"Nutrition\"));\n    return () => {\n      dispatch(themeSlice.actions.removeTitle());\n    };\n  }, [dispatch]);\n  return (\n    <Routes>\n      <Route path=\"result/*\" element={<Result />} />\n      <Route index element={<EntryList />} />\n    </Routes>\n  );\n};\n\nexport default Nutrition;\n"],"names":["useStyles","makeStyles","theme","container","paddingTop","spacing","paddingBottom","list","backgroundColor","palette","background","paper","EntryList","classes","history","useSelector","state","nutrition","dispatch","useDispatch","navigate","useNavigate","_jsx","Container","maxWidth","className","children","Grid","_jsxs","item","xs","Button","variant","sx","marginBottom","href","length","List","component","map","h","index","ListItem","secondaryAction","IconButton","edge","onClick","window","confirm","concat","name","nutritionSlice","actions","removeHistory","Icon","ListItemButton","loadHistory","ListItemText","primary","secondary","moment","date","format","supplements","props","useTheme","TableCell","_objectSpread","border","text","disabled","Question","_ref","answer","_state$nutrition$curr","current","answers","at","q","questions","_Fragment","CustomTableCell","Checkbox","checked","onChange","e","setAnswer","value","target","s","counted","includes","isChecked","align","style","undefined","action","disabledBackground","memo","Gender","gender","_state$nutrition$curr2","FormControl","FormLabel","id","RadioGroup","row","FormControlLabel","control","Radio","changeGender","label","inputArea","display","alignItems","gap","ResultInputArea","age","_state$nutrition$curr3","_state$nutrition$curr4","error","setError","useState","params","useParams","TextField","required","changeName","helperText","type","InputProps","inputProps","min","changeAge","_params$","indexParam","Number","parseInt","saveToHistory","ResultTableHead","TableHead","TableRow","minWidth","Total","total","reduce","prev","_answers$at","flex","gridContainer","height","padding","flexDirection","tableContainer","minHeight","table","userSelect","ResultContent","Paper","elevation","TableContainer","Table","TableBody","colSpan","color","contrastText","_","Fragment","Result","ready","useEffect","Nutrition","themeSlice","setTitle","removeTitle","Routes","Route","path","element"],"sourceRoot":""}